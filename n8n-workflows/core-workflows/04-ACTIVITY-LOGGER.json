{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "activity-logger",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -512,
        112
      ],
      "id": "webhook-activity-logger",
      "name": "Webhook Activity Logger",
      "webhookId": "activity-logger-v2"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "d301730b-a977-482b-a306-f312a91b0a6d",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -512,
        -50
      ]
    },
    {
      "parameters": {
        "jsCode": "// ðŸ“Š ACTIVITY LOGGER - Preparar datos para split de actividades\nconst payload = $input.item.json;\n\nconsole.log('ðŸ“Š === ACTIVITY LOGGER v3.0 ===');\nconsole.log('ðŸ“¥ Payload recibido:', JSON.stringify(payload, null, 2));\n\n// Verificar si hay datos vÃ¡lidos\nif (!payload.data) {\n  return {\n    json: {\n      error: 'No data in payload',\n      activities: []\n    }\n  };\n}\n\n// Preparar datos para el split de actividades\nconst activities = [];\nconst { v4: uuidv4 } = require('uuid');\nconst now = new Date().toISOString();\n\n// 1. VISITOR SESSION ACTIVITIES\nif (payload.data.session) {\n  const session = payload.data.session;\n  const visitor = payload.data.visitor;\n  const events = payload.data.events || [];\n  \n  // Activity: Page View\n  activities.push({\n    id: uuidv4(),\n    businessId: session.businessId,\n    type: 'page_view',\n    category: 'tracking',\n    entityType: 'visitor',\n    entityId: session.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Page View: ${session.pageTitle || 'Unknown Page'}`,\n    description: `Visitor viewed ${session.pageUrl} - Session: ${session.id}`,\n    data: JSON.stringify({\n      pageUrl: session.pageUrl,\n      pageTitle: session.pageTitle,\n      sessionId: session.id,\n      visitorId: session.visitorId,\n      timeOnPage: session.timeOnPage,\n      scrollPercentage: session.finalScrollPercentage,\n      eventCount: events.length,\n      referrer: session.referrer\n    }),\n    metadata: JSON.stringify({\n      attribution: {\n        source: session.source,\n        medium: session.medium,\n        campaign: session.campaign,\n        campaignName: session.campaignName,\n        referrer: session.referrer\n      },\n      pageDetails: {\n        url: session.pageUrl,\n        title: session.pageTitle,\n        timeOnPage: session.timeOnPage,\n        scrollPercentage: session.finalScrollPercentage\n      },\n      technical: {\n        deviceType: visitor?.deviceType,\n        browser: visitor?.browser,\n        operatingSystem: visitor?.operatingSystem,\n        country: visitor?.country,\n        city: visitor?.city\n      }\n    }),\n    source: 'activity_logger',\n    createdAt: session.startedAt || now\n  });\n  \n  // Activity: Visitor Session\n  activities.push({\n    id: uuidv4(),\n    businessId: session.businessId,\n    type: 'visitor_session',\n    category: 'tracking',\n    entityType: 'visitor',\n    entityId: session.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Visitor Session: ${session.duration ? Math.round(session.duration/60) + ' min' : 'Active'}`,\n    description: `Visitor session on ${session.pageUrl} - ${events.length} events recorded`,\n    data: JSON.stringify({\n      sessionId: session.id,\n      visitorId: session.visitorId,\n      duration: session.duration,\n      pageUrl: session.pageUrl,\n      eventCount: events.length,\n      startedAt: session.startedAt,\n      endedAt: session.endedAt,\n      isActive: !session.endedAt\n    }),\n    metadata: JSON.stringify({\n      attribution: {\n        source: session.source,\n        medium: session.medium,\n        campaign: session.campaign,\n        referrer: session.referrer\n      },\n      sessionDetails: {\n        duration: session.duration,\n        pageUrl: session.pageUrl,\n        initialUrl: session.initialUrl,\n        eventCount: events.length,\n        timeOnPage: session.timeOnPage,\n        scrollPercentage: session.finalScrollPercentage\n      },\n      technical: {\n        deviceType: visitor?.deviceType,\n        browser: visitor?.browser,\n        operatingSystem: visitor?.operatingSystem,\n        ipAddress: visitor?.ipAddress,\n        userAgent: visitor?.userAgent\n      }\n    }),\n    source: 'activity_logger',\n    createdAt: session.startedAt || now\n  });\n}\n\n// 2. CONVERSION ACTIVITIES\nif (payload.conversionDetected && payload.conversionData) {\n  const conversion = payload.conversionData;\n  const originalData = payload.originalData;\n  \n  activities.push({\n    id: uuidv4(),\n    businessId: conversion.businessId,\n    type: 'conversion_detected',\n    category: 'conversion',\n    entityType: 'visitor',\n    entityId: conversion.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Conversion: ${conversion.conversionType}`,\n    description: `Conversion detected on ${conversion.pageUrl} - Score: ${conversion.conversionScore}`,\n    data: JSON.stringify({\n      conversionType: conversion.conversionType,\n      conversionScore: conversion.conversionScore,\n      sessionId: conversion.sessionId,\n      visitorId: conversion.visitorId,\n      pageUrl: conversion.pageUrl,\n      indicators: conversion.indicators,\n      formEvents: conversion.formEvents,\n      totalEvents: conversion.totalEvents\n    }),\n    metadata: JSON.stringify({\n      attribution: {\n        source: originalData?.session?.source,\n        medium: originalData?.session?.medium,\n        campaign: originalData?.session?.campaign,\n        referrer: originalData?.session?.referrer\n      },\n      conversionDetails: {\n        type: conversion.conversionType,\n        score: conversion.conversionScore,\n        pageUrl: conversion.pageUrl,\n        pageTitle: conversion.pageTitle,\n        detectedAt: conversion.detectedAt,\n        indicators: conversion.indicators\n      }\n    }),\n    source: 'activity_logger',\n    createdAt: conversion.detectedAt || now\n  });\n}\n\n// 3. LEAD ACTIVITIES\nif (payload.data && payload.data.lead) {\n  const lead = payload.data.lead;\n  const isFromConversion = payload.data.isFromConversion;\n  \n  activities.push({\n    id: uuidv4(),\n    businessId: lead.businessId,\n    type: isFromConversion ? 'lead_created_from_conversion' : 'lead_captured',\n    category: 'lead_management',\n    entityType: 'lead',\n    entityId: lead.id,\n    leadId: lead.id,\n    contactId: null,\n    title: `Lead ${isFromConversion ? 'Created from Conversion' : 'Captured'}: ${lead.email || 'Anonymous'}`,\n    description: `Lead ${isFromConversion ? 'generated from visitor conversion' : 'captured from form'} - Source: ${lead.source}`,\n    data: JSON.stringify({\n      leadId: lead.id,\n      email: lead.email,\n      name: lead.name,\n      leadType: lead.leadType,\n      score: lead.score,\n      isHot: lead.isHot,\n      sessionId: lead.sessionId,\n      visitorId: lead.visitorId,\n      conversionPage: lead.conversionPage,\n      isFromConversion: isFromConversion\n    }),\n    metadata: JSON.stringify({\n      attribution: {\n        source: lead.source,\n        medium: lead.medium,\n        campaign: lead.campaignName,\n        content: lead.content,\n        term: lead.term,\n        referrer: lead.referrer\n      },\n      leadDetails: {\n        email: lead.email,\n        name: lead.name,\n        phone: lead.phone,\n        company: lead.company,\n        leadType: lead.leadType,\n        status: lead.status,\n        score: lead.score,\n        isHot: lead.isHot\n      }\n    }),\n    source: 'activity_logger',\n    createdAt: lead.createdAt || now\n  });\n}\n\n// 4. ENRICHMENT ACTIVITIES\nif (payload.enrichmentData) {\n  const enrichment = payload.enrichmentData;\n  const lead = payload.leadData;\n  \n  if (enrichment.scoring) {\n    activities.push({\n      id: uuidv4(),\n      businessId: lead.businessId,\n      type: 'lead_scored',\n      category: 'enrichment',\n      entityType: 'lead',\n      entityId: lead.id,\n      leadId: lead.id,\n      contactId: null,\n      title: `Lead Scored: ${enrichment.scoring.totalScore} points`,\n      description: `Lead scoring updated - Previous: ${enrichment.scoring.previousScore || 0}, New: ${enrichment.scoring.totalScore}`,\n      data: JSON.stringify({\n        leadId: lead.id,\n        previousScore: enrichment.scoring.previousScore || 0,\n        newScore: enrichment.scoring.totalScore,\n        scoringFactors: enrichment.scoring.factors,\n        isHot: enrichment.scoring.isHot\n      }),\n      metadata: JSON.stringify({\n        scoring: enrichment.scoring,\n        enrichmentType: 'scoring'\n      }),\n      source: 'activity_logger',\n      createdAt: now\n    });\n  }\n  \n  if (enrichment.tags && enrichment.tags.length > 0) {\n    activities.push({\n      id: uuidv4(),\n      businessId: lead.businessId,\n      type: 'lead_tagged',\n      category: 'enrichment',\n      entityType: 'lead',\n      entityId: lead.id,\n      leadId: lead.id,\n      contactId: null,\n      title: `Lead Tagged: ${enrichment.tags.join(', ')}`,\n      description: `Tags applied to lead: ${enrichment.tags.join(', ')}`,\n      data: JSON.stringify({\n        leadId: lead.id,\n        tags: enrichment.tags,\n        tagCount: enrichment.tags.length\n      }),\n      metadata: JSON.stringify({\n        tags: enrichment.tags,\n        enrichmentType: 'tagging'\n      }),\n      source: 'activity_logger',\n      createdAt: now\n    });\n  }\n}\n\nconsole.log(`âœ… ${activities.length} activities preparadas para split`);\n\nreturn {\n  json: {\n    success: true,\n    activitiesCount: activities.length,\n    activities: activities\n  }\n};"
      },
      "id": "774df74e-b6ea-42a2-ad7f-64ba398d250d",
      "name": "Prepare Activities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        112
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "activities",
        "options": {}
      },
      "id": "split-activities",
      "name": "Split Activities",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -64,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// ðŸ“Š ACTIVITY LOGGER - Sistema centralizado de logging\nconst payload = $input.item.json;\n\nconsole.log('ðŸ“Š === ACTIVITY LOGGER v2.0 ===');\nconsole.log('ðŸ“¥ Payload recibido:', JSON.stringify(payload, null, 2));\n\nconst { v4: uuidv4 } = require('uuid');\nconst now = new Date().toISOString();\n\n// Array para almacenar todas las activities a crear\nlet activitiesToCreate = [];\n\n// ðŸŽ¯ DETECTAR TIPO DE PAYLOAD Y CREAR ACTIVITIES CORRESPONDIENTES\n\n// 1. VISITOR SESSION ACTIVITIES\nif (payload.data && payload.data.session) {\n  const session = payload.data.session;\n  const visitor = payload.data.visitor;\n  const events = payload.data.events || [];\n  \n  // Activity: Page View\n  activitiesToCreate.push({\n    id: uuidv4(),\n    businessId: session.businessId,\n    type: 'page_view',\n    category: 'tracking',\n    entityType: 'visitor',\n    entityId: session.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Page View: ${session.pageTitle || 'Unknown Page'}`,\n    description: `Visitor viewed ${session.pageUrl} - Session: ${session.id}`,\n    data: {\n      pageUrl: session.pageUrl,\n      pageTitle: session.pageTitle,\n      sessionId: session.id,\n      visitorId: session.visitorId,\n      timeOnPage: session.timeOnPage,\n      scrollPercentage: session.finalScrollPercentage,\n      eventCount: events.length,\n      referrer: session.referrer\n    },\n    metadata: {\n      attribution: {\n        source: session.source,\n        medium: session.medium,\n        campaign: session.campaign,\n        campaignName: session.campaignName,\n        referrer: session.referrer\n      },\n      pageDetails: {\n        url: session.pageUrl,\n        title: session.pageTitle,\n        timeOnPage: session.timeOnPage,\n        scrollPercentage: session.finalScrollPercentage\n      },\n      technical: {\n        deviceType: visitor?.deviceType,\n        browser: visitor?.browser,\n        operatingSystem: visitor?.operatingSystem,\n        country: visitor?.country,\n        city: visitor?.city\n      }\n    },\n    source: 'activity_logger',\n    createdAt: session.startedAt || now\n  });\n  \n  // Activity: Visitor Session\n  activitiesToCreate.push({\n    id: uuidv4(),\n    businessId: session.businessId,\n    type: 'visitor_session',\n    category: 'tracking',\n    entityType: 'visitor',\n    entityId: session.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Visitor Session: ${session.duration ? Math.round(session.duration/60) + ' min' : 'Active'}`,\n    description: `Visitor session on ${session.pageUrl} - ${events.length} events recorded`,\n    data: {\n      sessionId: session.id,\n      visitorId: session.visitorId,\n      duration: session.duration,\n      pageUrl: session.pageUrl,\n      eventCount: events.length,\n      startedAt: session.startedAt,\n      endedAt: session.endedAt,\n      isActive: !session.endedAt\n    },\n    metadata: {\n      attribution: {\n        source: session.source,\n        medium: session.medium,\n        campaign: session.campaign,\n        referrer: session.referrer\n      },\n      sessionDetails: {\n        duration: session.duration,\n        pageUrl: session.pageUrl,\n        initialUrl: session.initialUrl,\n        eventCount: events.length,\n        timeOnPage: session.timeOnPage,\n        scrollPercentage: session.finalScrollPercentage\n      },\n      technical: {\n        deviceType: visitor?.deviceType,\n        browser: visitor?.browser,\n        operatingSystem: visitor?.operatingSystem,\n        ipAddress: visitor?.ipAddress,\n        userAgent: visitor?.userAgent\n      }\n    },\n    source: 'activity_logger',\n    createdAt: session.startedAt || now\n  });\n}\n\n// 2. CONVERSION ACTIVITIES (si hay datos de conversiÃ³n)\nif (payload.conversionDetected && payload.conversionData) {\n  const conversion = payload.conversionData;\n  const originalData = payload.originalData;\n  \n  activitiesToCreate.push({\n    id: uuidv4(),\n    businessId: conversion.businessId,\n    type: 'conversion_detected',\n    category: 'conversion',\n    entityType: 'visitor',\n    entityId: conversion.visitorId,\n    leadId: null,\n    contactId: null,\n    title: `Conversion: ${conversion.conversionType}`,\n    description: `Conversion detected on ${conversion.pageUrl} - Score: ${conversion.conversionScore}`,\n    data: {\n      conversionType: conversion.conversionType,\n      conversionScore: conversion.conversionScore,\n      sessionId: conversion.sessionId,\n      visitorId: conversion.visitorId,\n      pageUrl: conversion.pageUrl,\n      indicators: conversion.indicators,\n      formEvents: conversion.formEvents,\n      totalEvents: conversion.totalEvents\n    },\n    metadata: {\n      attribution: {\n        source: originalData?.session?.source,\n        medium: originalData?.session?.medium,\n        campaign: originalData?.session?.campaign,\n        referrer: originalData?.session?.referrer\n      },\n      conversionDetails: {\n        type: conversion.conversionType,\n        score: conversion.conversionScore,\n        pageUrl: conversion.pageUrl,\n        pageTitle: conversion.pageTitle,\n        detectedAt: conversion.detectedAt,\n        indicators: conversion.indicators\n      },\n      technical: {\n        timeOnPage: conversion.timeOnPage,\n        formEvents: conversion.formEvents,\n        totalEvents: conversion.totalEvents\n      }\n    },\n    source: 'activity_logger',\n    createdAt: conversion.detectedAt || now\n  });\n}\n\n// 3. LEAD ACTIVITIES (si hay datos de lead)\nif (payload.data && payload.data.lead) {\n  const lead = payload.data.lead;\n  const isFromConversion = payload.data.isFromConversion;\n  \n  activitiesToCreate.push({\n    id: uuidv4(),\n    businessId: lead.businessId,\n    type: isFromConversion ? 'lead_created_from_conversion' : 'lead_captured',\n    category: 'lead_management',\n    entityType: 'lead',\n    entityId: lead.id,\n    leadId: lead.id,\n    contactId: null,\n    title: `Lead ${isFromConversion ? 'Created from Conversion' : 'Captured'}: ${lead.email || 'Anonymous'}`,\n    description: `Lead ${isFromConversion ? 'generated from visitor conversion' : 'captured from form'} - Source: ${lead.source}`,\n    data: {\n      leadId: lead.id,\n      email: lead.email,\n      name: lead.name,\n      leadType: lead.leadType,\n      score: lead.score,\n      isHot: lead.isHot,\n      sessionId: lead.sessionId,\n      visitorId: lead.visitorId,\n      conversionPage: lead.conversionPage,\n      isFromConversion: isFromConversion\n    },\n    metadata: {\n      attribution: {\n        source: lead.source,\n        medium: lead.medium,\n        campaign: lead.campaignName,\n        content: lead.content,\n        term: lead.term,\n        referrer: lead.referrer\n      },\n      leadDetails: {\n        email: lead.email,\n        name: lead.name,\n        phone: lead.phone,\n        company: lead.company,\n        leadType: lead.leadType,\n        status: lead.status,\n        score: lead.score,\n        isHot: lead.isHot\n      },\n      technical: {\n        deviceType: lead.deviceType,\n        browser: lead.browser,\n        operatingSystem: lead.operatingSystem,\n        ipAddress: lead.ipAddress,\n        timeOnPage: lead.timeOnPage,\n        scrollPercentage: lead.scrollPercentage\n      },\n      location: {\n        country: lead.country,\n        region: lead.region,\n        city: lead.city,\n        timezone: lead.timezone\n      }\n    },\n    source: 'activity_logger',\n    createdAt: lead.createdAt || now\n  });\n}\n\n// 4. ENRICHMENT ACTIVITIES (si hay datos de enrichment)\nif (payload.enrichmentData) {\n  const enrichment = payload.enrichmentData;\n  const lead = payload.leadData;\n  \n  // Activity para scoring\n  if (enrichment.scoring) {\n    activitiesToCreate.push({\n      id: uuidv4(),\n      businessId: lead.businessId,\n      type: 'lead_scored',\n      category: 'enrichment',\n      entityType: 'lead',\n      entityId: lead.id,\n      leadId: lead.id,\n      contactId: null,\n      title: `Lead Scored: ${enrichment.scoring.totalScore} points`,\n      description: `Lead scoring updated - Previous: ${enrichment.scoring.previousScore || 0}, New: ${enrichment.scoring.totalScore}`,\n      data: {\n        leadId: lead.id,\n        previousScore: enrichment.scoring.previousScore || 0,\n        newScore: enrichment.scoring.totalScore,\n        scoringFactors: enrichment.scoring.factors,\n        isHot: enrichment.scoring.isHot\n      },\n      metadata: {\n        scoring: enrichment.scoring,\n        enrichmentType: 'scoring'\n      },\n      source: 'activity_logger',\n      createdAt: now\n    });\n  }\n  \n  // Activity para tags\n  if (enrichment.tags && enrichment.tags.length > 0) {\n    activitiesToCreate.push({\n      id: uuidv4(),\n      businessId: lead.businessId,\n      type: 'lead_tagged',\n      category: 'enrichment',\n      entityType: 'lead',\n      entityId: lead.id,\n      leadId: lead.id,\n      contactId: null,\n      title: `Lead Tagged: ${enrichment.tags.join(', ')}`,\n      description: `Tags applied to lead: ${enrichment.tags.join(', ')}`,\n      data: {\n        leadId: lead.id,\n        tags: enrichment.tags,\n        tagCount: enrichment.tags.length\n      },\n      metadata: {\n        tags: enrichment.tags,\n        enrichmentType: 'tagging'\n      },\n      source: 'activity_logger',\n      createdAt: now\n    });\n  }\n}\n\n// 5. CHANNEL STATUS ACTIVITIES (para attribution)\nif (payload.data && (payload.data.session || payload.data.lead)) {\n  const entityData = payload.data.lead || payload.data.session;\n  const entityType = payload.data.lead ? 'lead' : 'visitor';\n  const entityId = payload.data.lead ? payload.data.lead.id : payload.data.session.visitorId;\n  \n  // Solo crear channel status si hay datos de attribution vÃ¡lidos\n  if (entityData.source && entityData.source !== 'direct') {\n    activitiesToCreate.push({\n      id: uuidv4(),\n      businessId: entityData.businessId,\n      type: 'channel_attribution',\n      category: 'attribution',\n      entityType: entityType,\n      entityId: entityId,\n      leadId: payload.data.lead ? payload.data.lead.id : null,\n      contactId: null,\n      title: `Attribution: ${entityData.source} / ${entityData.medium}`,\n      description: `${entityType} attributed to ${entityData.source} channel via ${entityData.medium}`,\n      data: {\n        source: entityData.source,\n        medium: entityData.medium,\n        campaign: entityData.campaignName || entityData.campaign,\n        content: entityData.content,\n        term: entityData.term,\n        fbclid: entityData.fbclid,\n        referrer: entityData.referrer,\n        entityType: entityType,\n        entityId: entityId,\n        sessionId: entityData.sessionId || entityData.id\n      },\n      metadata: {\n        attribution: {\n          source: entityData.source,\n          medium: entityData.medium,\n          campaign: entityData.campaignName || entityData.campaign,\n          content: entityData.content,\n          term: entityData.term,\n          fbclid: entityData.fbclid,\n          referrer: entityData.referrer\n        },\n        channelDetails: {\n          primary: entityData.source,\n          secondary: entityData.medium,\n          campaign: entityData.campaignName || entityData.campaign,\n          firstTouch: true,\n          lastTouch: true\n        }\n      },\n      source: 'activity_logger',\n      createdAt: now\n    });\n  }\n}\n\nconst result = {\n  success: true,\n  activitiesCreated: activitiesToCreate.length,\n  activities: activitiesToCreate,\n  summary: {\n    pageViews: activitiesToCreate.filter(a => a.type === 'page_view').length,\n    sessions: activitiesToCreate.filter(a => a.type === 'visitor_session').length,\n    conversions: activitiesToCreate.filter(a => a.type === 'conversion_detected').length,\n    leads: activitiesToCreate.filter(a => a.type.includes('lead')).length,\n    enrichments: activitiesToCreate.filter(a => a.category === 'enrichment').length,\n    attributions: activitiesToCreate.filter(a => a.type === 'channel_attribution').length\n  }\n};\n\nconsole.log(`âœ… ${activitiesToCreate.length} activities preparadas para inserciÃ³n`);\nconsole.log('ðŸ“Š Summary:', result.summary);\n\nreturn { json: result };"
      },
      "id": "774df74e-b6ea-42a2-ad7f-64ba398d250d",
      "name": "Process Activities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        112
      ]
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list" 
        },
        "table": {
          "__rl": true,
          "value": "activities",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "businessId": "={{ $json.businessId }}",
            "type": "={{ $json.type }}",
            "category": "={{ $json.category }}",
            "entityType": "={{ $json.entityType }}",
            "entityId": "={{ $json.entityId }}",
            "leadId": "={{ $json.leadId }}",
            "contactId": "={{ $json.contactId }}",
            "title": "={{ $json.title }}",
            "description": "={{ $json.description }}",
            "data": "={{ $json.data }}",
            "metadata": "={{ $json.metadata }}",
            "source": "={{ $json.source }}",
            "createdAt": "={{ $json.createdAt }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "businessId",
              "displayName": "businessId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "type",
              "displayName": "type",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "category",
              "displayName": "category",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entityType",
              "displayName": "entityType",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entityId",
              "displayName": "entityId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "leadId",
              "displayName": "leadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "contactId",
              "displayName": "contactId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d54dbd5f-ae5d-42bc-86c1-120f64da2775",
      "name": "Save Activity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        160,
        112
      ],
      "credentials": {
        "postgres": {
          "id": "V6Wg0EpZSpeIWJlp",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "06-EMAIL-ORCHESTRATOR",
        "options": {}
      },
      "id": "7467e13c-c4b2-47c6-9ca6-af68eb5d0110",
      "name": "Execute Email Orchestrator",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        384,
        112
      ]
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "activities",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "businessId",
              "displayName": "businessId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "type",
              "displayName": "type",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "category",
              "displayName": "category",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entityType",
              "displayName": "entityType",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entityId",
              "displayName": "entityId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "leadId",
              "displayName": "leadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "contactId",
              "displayName": "contactId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "createdBy",
              "displayName": "createdBy",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false,
          "values": {
            "id": "={{ $json.id }}",
            "businessId": "={{ $json.businessId }}",
            "type": "={{ $json.type }}",
            "category": "={{ $json.category }}",
            "entityType": "={{ $json.entityType }}",
            "entityId": "={{ $json.entityId }}",
            "leadId": "={{ $json.leadId }}",
            "contactId": "={{ $json.contactId }}",
            "title": "={{ $json.title }}",
            "description": "={{ $json.description }}",
            "data": "={{ $json.data }}",
            "metadata": "={{ $json.metadata }}",
            "source": "={{ $json.source }}",
            "createdAt": "={{ $json.createdAt }}"
          }
        },
        "options": {}
      },
      "id": "d54dbd5f-ae5d-42bc-86c1-120f64da2775",
      "name": "Bulk Insert Activities",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        160,
        112
      ],
      "credentials": {
        "postgres": {
          "id": "V6Wg0EpZSpeIWJlp",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Crear channel status entries si hay activities de attribution\nconst insertResults = $input.all();\nconst originalPayload = $('Process Activities').first().json;\n\nconst channelActivities = originalPayload.activities.filter(a => a.type === 'channel_attribution');\n\nif (channelActivities.length === 0) {\n  return {\n    json: {\n      success: true,\n      message: 'No channel activities to process',\n      channelsCreated: 0\n    }\n  };\n}\n\nconst { v4: uuidv4 } = require('uuid');\nconst now = new Date().toISOString();\n\n// Crear channel status entries\nconst channelStatuses = channelActivities.map(activity => ({\n  id: uuidv4(),\n  businessId: activity.businessId,\n  entityType: activity.entityType,\n  entityId: activity.entityId,\n  leadId: activity.leadId,\n  contactId: null,\n  channel: activity.data.source,\n  status: 'active',\n  source: activity.data.source,\n  medium: activity.data.medium,\n  campaign: activity.data.campaign,\n  content: activity.data.content,\n  term: activity.data.term,\n  fbclid: activity.data.fbclid,\n  referrer: activity.data.referrer,\n  firstTouchAt: now,\n  lastTouchAt: now,\n  touchCount: 1,\n  isActive: true,\n  metadata: activity.metadata,\n  createdAt: now,\n  updatedAt: now\n}));\n\nconsole.log(`ðŸ“¢ Creando ${channelStatuses.length} channel status entries`);\n\nreturn {\n  json: {\n    success: true,\n    channelsCreated: channelStatuses.length,\n    channels: channelStatuses\n  }\n};"
      },
      "id": "e77f7ea3-a566-4296-b1f6-8c321e2451b6",
      "name": "Create Channel Statuses",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        112
      ]
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "channel_statuses",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "step": 0,
            "messagesSent": 0,
            "messagesReceived": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "businessId",
              "displayName": "businessId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "leadId",
              "displayName": "leadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "contactId",
              "displayName": "contactId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [
                {
                  "name": "CUSTOM",
                  "value": "CUSTOM"
                },
                {
                  "name": "WEB",
                  "value": "WEB"
                },
                {
                  "name": "PUSH",
                  "value": "PUSH"
                },
                {
                  "name": "CHAT",
                  "value": "CHAT"
                },
                {
                  "name": "SOCIAL",
                  "value": "SOCIAL"
                },
                {
                  "name": "MEETING",
                  "value": "MEETING"
                },
                {
                  "name": "CALL",
                  "value": "CALL"
                },
                {
                  "name": "SMS",
                  "value": "SMS"
                },
                {
                  "name": "WHATSAPP",
                  "value": "WHATSAPP"
                },
                {
                  "name": "EMAIL",
                  "value": "EMAIL"
                }
              ],
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "step",
              "displayName": "step",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "nextStepDate",
              "displayName": "nextStepDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "messagesSent",
              "displayName": "messagesSent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "messagesReceived",
              "displayName": "messagesReceived",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "lastMessageDate",
              "displayName": "lastMessageDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "lastResponseDate",
              "displayName": "lastResponseDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "updatedAt",
              "displayName": "updatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false,
          "values": {
            "id": "={{ $json.channels[0].id }}",
            "businessId": "={{ $json.channels[0].businessId }}",
            "entityType": "={{ $json.channels[0].entityType }}",
            "entityId": "={{ $json.channels[0].entityId }}",
            "leadId": "={{ $json.channels[0].leadId }}",
            "contactId": "={{ $json.channels[0].contactId }}",
            "channel": "={{ $json.channels[0].channel }}",
            "status": "={{ $json.channels[0].status }}",
            "source": "={{ $json.channels[0].source }}",
            "medium": "={{ $json.channels[0].medium }}",
            "campaign": "={{ $json.channels[0].campaign }}",
            "content": "={{ $json.channels[0].content }}",
            "term": "={{ $json.channels[0].term }}",
            "fbclid": "={{ $json.channels[0].fbclid }}",
            "referrer": "={{ $json.channels[0].referrer }}",
            "firstTouchAt": "={{ $json.channels[0].firstTouchAt }}",
            "lastTouchAt": "={{ $json.channels[0].lastTouchAt }}",
            "touchCount": "={{ $json.channels[0].touchCount }}",
            "isActive": "={{ $json.channels[0].isActive }}",
            "metadata": "={{ JSON.stringify($json.channels[0].metadata) }}",
            "createdAt": "={{ $json.channels[0].createdAt }}",
            "updatedAt": "={{ $json.channels[0].updatedAt }}"
          }
        },
        "options": {}
      },
      "id": "3c57265b-5435-481a-aee7-97859d217763",
      "name": "Save Channel Statuses",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        608,
        112
      ],
      "credentials": {
        "postgres": {
          "id": "V6Wg0EpZSpeIWJlp",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "06-EMAIL-ORCHESTRATOR",
        "options": {}
      },
      "id": "execute-email-node",
      "name": "Execute Email Orchestrator",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        832,
        112
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: true, message: 'Activities logged successfully', activitiesCreated: $('Process Activities').first().json.activitiesCreated, channelsCreated: $('Create Channel Statuses').first().json.channelsCreated, summary: $('Process Activities').first().json.summary }) }}",
        "options": {}
      },
      "id": "response-node",
      "name": "Response Activity",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1056,
        112
      ]
    }
  ],
  "connections": {
    "Webhook Activity Logger": {
      "main": [
        [
          {
            "node": "Process Activities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Process Activities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Email Orchestrator": {
      "main": [
        [
          {
            "node": "Response Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Activities": {
      "main": [
        [
          {
            "node": "Split Activities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Activities": {
      "main": [
        [
          {
            "node": "Save Activities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Activities": {
      "main": [
        [
          {
            "node": "Create Channel Statuses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Channel Statuses": {
      "main": [
        [
          {
            "node": "Save Channel Statuses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Channel Statuses": {
      "main": [
        [
          {
            "node": "Execute Email Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "334c1bc3f59651ead42f7f75537ccd47cfce8a8ad7f9b6a1f410e3671bf8aecf"
  }
}