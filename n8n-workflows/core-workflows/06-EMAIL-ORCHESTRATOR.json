{
  "name": "üìß EMAIL-ORCHESTRATOR v2.0",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "email-orchestrator",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-email",
      "name": "Webhook Email",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 300],
      "webhookId": "email-orchestrator-v2"
    },
    {
      "parameters": {
        "functionCode": "// üìß EMAIL ORCHESTRATOR - Maneja campa√±as de email\nconst payload = $input.item.json;\n\nconsole.log('üìß === EMAIL ORCHESTRATOR v2.0 ===');\nconsole.log('üì• Payload recibido');\n\n// Extraer datos del lead\nconst leadData = payload.data?.lead || {};\nconst isFromConversion = payload.data?.isFromConversion || false;\nconst enrichmentData = payload.enrichment || null;\n\n// Validaci√≥n b√°sica\nif (!leadData.id || !leadData.email) {\n  return {\n    json: {\n      success: false,\n      error: 'Missing lead ID or email for email orchestration',\n      leadData: leadData\n    }\n  };\n}\n\nconsole.log(`üìß Orquestando email para lead: ${leadData.id}`);\nconsole.log(`üìß Email: ${leadData.email}`);\nconsole.log(`üéØ From conversion: ${isFromConversion}`);\n\nconst { v4: uuidv4 } = require('uuid');\nconst now = new Date().toISOString();\n\n// üéØ DETERMINAR SECUENCIA DE EMAIL BASADA EN LEAD TYPE Y SCORE\nlet emailSequence = {\n  campaignName: 'default_sequence',\n  emailNumber: 1,\n  subject: 'Bienvenido - Tu gu√≠a est√° lista',\n  template: 'welcome_default',\n  scheduledFor: new Date(Date.now() + (5 * 60 * 1000)).toISOString(), // 5 minutos\n  priority: 'normal'\n};\n\n// 1. SECUENCIA PARA FREE GUIDE\nif (leadData.leadType === 'free_guide') {\n  emailSequence = {\n    campaignName: `${leadData.source}_${leadData.leadType}`,\n    emailNumber: 1,\n    subject: 'Tu gu√≠a de transici√≥n a comida natural',\n    template: 'free_guide_welcome',\n    scheduledFor: new Date(Date.now() + (2 * 60 * 1000)).toISOString(), // 2 minutos\n    priority: 'high',\n    sequence: [\n      { day: 0, subject: 'Tu gu√≠a de transici√≥n a comida natural', template: 'free_guide_welcome' },\n      { day: 1, subject: '¬øYa empezaste con las recetas?', template: 'free_guide_day1' },\n      { day: 3, subject: 'Historias de √©xito de otros due√±os', template: 'free_guide_day3' },\n      { day: 7, subject: 'Oferta especial: Consulta veterinaria', template: 'free_guide_day7' }\n    ]\n  };\n}\n\n// 2. SECUENCIA PARA CONVERSIONES\nif (isFromConversion) {\n  emailSequence.priority = 'urgent';\n  emailSequence.scheduledFor = new Date(Date.now() + (1 * 60 * 1000)).toISOString(); // 1 minuto\n  emailSequence.campaignName = `conversion_${leadData.source}`;\n  emailSequence.subject = '¬°Gracias por tu inter√©s! Tu informaci√≥n est√° lista';\n  emailSequence.template = 'conversion_immediate';\n}\n\n// 3. AJUSTAR POR HOT LEAD\nif (leadData.isHot || (enrichmentData && enrichmentData.enrichedScore > 70)) {\n  emailSequence.priority = 'urgent';\n  emailSequence.scheduledFor = new Date(Date.now() + (30 * 1000)).toISOString(); // 30 seconds\n  emailSequence.subject = 'üî• ' + emailSequence.subject;\n  emailSequence.template = 'hot_lead_' + emailSequence.template;\n}\n\n// 4. AJUSTAR POR GEOGRAF√çA\nif (leadData.country === 'Uruguay') {\n  emailSequence.campaignName += '_uy';\n  emailSequence.subject += ' - Env√≠o gratis en Uruguay';\n}\n\n// üéØ PREPARAR EMAIL CAMPAIGN DATA\nconst emailCampaignData = {\n  id: uuidv4(),\n  businessId: leadData.businessId,\n  leadId: leadData.id,\n  contactId: null,\n  campaignName: emailSequence.campaignName,\n  emailNumber: emailSequence.emailNumber,\n  subject: emailSequence.subject,\n  template: emailSequence.template,\n  status: 'scheduled',\n  priority: emailSequence.priority,\n  scheduledFor: emailSequence.scheduledFor,\n  sentAt: null,\n  deliveredAt: null,\n  openedAt: null,\n  clickedAt: null,\n  // Datos del lead para personalizaci√≥n\n  recipientData: {\n    email: leadData.email,\n    name: leadData.name || 'Amigo de las mascotas',\n    leadType: leadData.leadType,\n    source: leadData.source,\n    country: leadData.country,\n    deviceType: leadData.deviceType,\n    isHot: leadData.isHot,\n    score: enrichmentData ? enrichmentData.enrichedScore : leadData.score\n  },\n  // Attribution para tracking\n  attribution: {\n    source: leadData.source,\n    medium: leadData.medium,\n    campaign: leadData.campaignName,\n    utmSource: leadData.source,\n    utmMedium: leadData.medium,\n    utmCampaign: emailSequence.campaignName\n  },\n  // Metadata\n  metadata: {\n    isFromConversion: isFromConversion,\n    originalLeadType: leadData.leadType,\n    enrichmentScore: enrichmentData ? enrichmentData.enrichedScore : null,\n    sequenceInfo: emailSequence.sequence || null,\n    customFields: leadData.customFields || {}\n  },\n  createdAt: now,\n  updatedAt: now\n};\n\n// üéØ PREPARAR EMAIL ACTIVITY\nconst emailActivity = {\n  id: uuidv4(),\n  businessId: leadData.businessId,\n  type: 'email_scheduled',\n  category: 'email_marketing',\n  entityType: 'lead',\n  entityId: leadData.id,\n  leadId: leadData.id,\n  contactId: null,\n  title: `Email Scheduled: ${emailSequence.subject}`,\n  description: `Email campaign scheduled - Campaign: ${emailSequence.campaignName} - Priority: ${emailSequence.priority}`,\n  data: {\n    campaignId: emailCampaignData.id,\n    campaignName: emailSequence.campaignName,\n    emailNumber: emailSequence.emailNumber,\n    subject: emailSequence.subject,\n    template: emailSequence.template,\n    priority: emailSequence.priority,\n    scheduledFor: emailSequence.scheduledFor,\n    recipientEmail: leadData.email,\n    isFromConversion: isFromConversion,\n    isHotLead: leadData.isHot\n  },\n  metadata: {\n    emailCampaign: {\n      campaignName: emailSequence.campaignName,\n      emailNumber: emailSequence.emailNumber,\n      priority: emailSequence.priority,\n      template: emailSequence.template,\n      scheduledFor: emailSequence.scheduledFor\n    },\n    leadDetails: {\n      email: leadData.email,\n      name: leadData.name,\n      leadType: leadData.leadType,\n      isHot: leadData.isHot,\n      score: enrichmentData ? enrichmentData.enrichedScore : leadData.score\n    },\n    attribution: emailCampaignData.attribution\n  },\n  source: 'email_orchestrator',\n  createdAt: now\n};\n\n// üéØ PREPARAR SECUENCIA COMPLETA SI EXISTE\nlet futureEmails = [];\nif (emailSequence.sequence && emailSequence.sequence.length > 1) {\n  futureEmails = emailSequence.sequence.slice(1).map((emailStep, index) => {\n    const scheduledDate = new Date(Date.now() + (emailStep.day * 24 * 60 * 60 * 1000));\n    \n    return {\n      id: uuidv4(),\n      businessId: leadData.businessId,\n      leadId: leadData.id,\n      contactId: null,\n      campaignName: emailSequence.campaignName,\n      emailNumber: index + 2, // Start from 2 since first email is #1\n      subject: emailStep.subject,\n      template: emailStep.template,\n      status: 'pending',\n      priority: 'normal',\n      scheduledFor: scheduledDate.toISOString(),\n      sentAt: null,\n      deliveredAt: null,\n      openedAt: null,\n      clickedAt: null,\n      recipientData: emailCampaignData.recipientData,\n      attribution: emailCampaignData.attribution,\n      metadata: {\n        ...emailCampaignData.metadata,\n        sequenceStep: index + 2,\n        parentCampaignId: emailCampaignData.id\n      },\n      createdAt: now,\n      updatedAt: now\n    };\n  });\n}\n\nconst result = {\n  success: true,\n  data: {\n    emailCampaign: emailCampaignData,\n    emailActivity: emailActivity,\n    futureEmails: futureEmails,\n    sequenceInfo: {\n      campaignName: emailSequence.campaignName,\n      totalEmails: 1 + futureEmails.length,\n      priority: emailSequence.priority,\n      firstEmailScheduledFor: emailSequence.scheduledFor\n    }\n  },\n  nextWorkflows: {\n    activityLogger: true // Siempre registrar la activity\n  },\n  webhooks: {\n    activityLogger: 'http://localhost:5678/webhook/activity-logger'\n  }\n};\n\nconsole.log(`‚úÖ Email campaign orquestada`);\nconsole.log(`üìß Campaign: ${emailSequence.campaignName}`);\nconsole.log(`üì¨ Subject: ${emailSequence.subject}`);\nconsole.log(`‚è∞ Scheduled: ${emailSequence.scheduledFor}`);\nconsole.log(`üéØ Priority: ${emailSequence.priority}`);\nconsole.log(`üìä Sequence emails: ${1 + futureEmails.length}`);\n\nreturn { json: result };"
      },
      "id": "orchestrate-email",
      "name": "Orchestrate Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "email_campaigns",
        "columns": {
          "mappingMode": "defineBelow",
          "values": {
            "id": "={{ $json.data.emailCampaign.id }}",
            "businessId": "={{ $json.data.emailCampaign.businessId }}",
            "leadId": "={{ $json.data.emailCampaign.leadId }}",
            "contactId": null,
            "campaignName": "={{ $json.data.emailCampaign.campaignName }}",
            "emailNumber": "={{ $json.data.emailCampaign.emailNumber }}",
            "subject": "={{ $json.data.emailCampaign.subject }}",
            "template": "={{ $json.data.emailCampaign.template }}",
            "status": "={{ $json.data.emailCampaign.status }}",
            "priority": "={{ $json.data.emailCampaign.priority }}",
            "scheduledFor": "={{ $json.data.emailCampaign.scheduledFor }}",
            "sentAt": null,
            "deliveredAt": null,
            "openedAt": null,
            "clickedAt": null,
            "recipientData": "={{ JSON.stringify($json.data.emailCampaign.recipientData) }}",
            "attribution": "={{ JSON.stringify($json.data.emailCampaign.attribution) }}",
            "metadata": "={{ JSON.stringify($json.data.emailCampaign.metadata) }}",
            "createdAt": "={{ $json.data.emailCampaign.createdAt }}",
            "updatedAt": "={{ $json.data.emailCampaign.updatedAt }}"
          }
        },
        "credentials": "V6Wg0EpZSpeIWJlp"
      },
      "id": "save-email-campaign",
      "name": "Save Email Campaign",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [600, 200]
    },
    {
      "parameters": {
        "functionCode": "// Preparar emails futuros para inserci√≥n en lote\nconst payload = $input.item.json;\nconst futureEmails = payload.data.futureEmails || [];\n\nif (futureEmails.length === 0) {\n  return {\n    json: {\n      success: true,\n      message: 'No future emails to schedule',\n      futureEmailsScheduled: 0\n    }\n  };\n}\n\n// Transformar para PostgreSQL bulk insert\nconst insertData = futureEmails.map(email => ({\n  json: {\n    id: email.id,\n    businessId: email.businessId,\n    leadId: email.leadId,\n    contactId: null,\n    campaignName: email.campaignName,\n    emailNumber: email.emailNumber,\n    subject: email.subject,\n    template: email.template,\n    status: email.status,\n    priority: email.priority,\n    scheduledFor: email.scheduledFor,\n    sentAt: null,\n    deliveredAt: null,\n    openedAt: null,\n    clickedAt: null,\n    recipientData: JSON.stringify(email.recipientData),\n    attribution: JSON.stringify(email.attribution),\n    metadata: JSON.stringify(email.metadata),\n    createdAt: email.createdAt,\n    updatedAt: email.updatedAt\n  }\n}));\n\nconsole.log(`üìß Programando ${insertData.length} emails futuros`);\n\nreturn insertData;"
      },
      "id": "prepare-future-emails",
      "name": "Prepare Future Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 400]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "email_campaigns",
        "columns": {
          "mappingMode": "defineBelow",
          "values": {
            "id": "={{ $json.id }}",
            "businessId": "={{ $json.businessId }}",
            "leadId": "={{ $json.leadId }}",
            "contactId": null,
            "campaignName": "={{ $json.campaignName }}",
            "emailNumber": "={{ $json.emailNumber }}",
            "subject": "={{ $json.subject }}",
            "template": "={{ $json.template }}",
            "status": "={{ $json.status }}",
            "priority": "={{ $json.priority }}",
            "scheduledFor": "={{ $json.scheduledFor }}",
            "sentAt": null,
            "deliveredAt": null,
            "openedAt": null,
            "clickedAt": null,
            "recipientData": "={{ $json.recipientData }}",
            "attribution": "={{ $json.attribution }}",
            "metadata": "={{ $json.metadata }}",
            "createdAt": "={{ $json.createdAt }}",
            "updatedAt": "={{ $json.updatedAt }}"
          }
        },
        "credentials": "V6Wg0EpZSpeIWJlp"
      },
      "id": "save-future-emails",
      "name": "Save Future Emails",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [800, 400]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "activities",
        "columns": {
          "mappingMode": "defineBelow",
          "values": {
            "id": "={{ $json.data.emailActivity.id }}",
            "businessId": "={{ $json.data.emailActivity.businessId }}",
            "type": "={{ $json.data.emailActivity.type }}",
            "category": "={{ $json.data.emailActivity.category }}",
            "entityType": "={{ $json.data.emailActivity.entityType }}",
            "entityId": "={{ $json.data.emailActivity.entityId }}",
            "leadId": "={{ $json.data.emailActivity.leadId }}",
            "contactId": null,
            "title": "={{ $json.data.emailActivity.title }}",
            "description": "={{ $json.data.emailActivity.description }}",
            "data": "={{ JSON.stringify($json.data.emailActivity.data) }}",
            "metadata": "={{ JSON.stringify($json.data.emailActivity.metadata) }}",
            "source": "={{ $json.data.emailActivity.source }}",
            "createdAt": "={{ $json.data.emailActivity.createdAt }}"
          }
        },
        "credentials": "V6Wg0EpZSpeIWJlp"
      },
      "id": "save-email-activity",
      "name": "Save Email Activity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [800, 200]
    },
    {
      "parameters": {
        "url": "http://localhost:5678/webhook/activity-logger",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "call-activity-logger",
      "name": "Call Activity Logger",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: true, message: 'Email campaign orchestrated successfully', campaignId: $json.data.emailCampaign.id, campaignName: $json.data.emailCampaign.campaignName, subject: $json.data.emailCampaign.subject, scheduledFor: $json.data.emailCampaign.scheduledFor, priority: $json.data.emailCampaign.priority, totalEmails: $json.data.sequenceInfo.totalEmails, futureEmailsScheduled: $json.data.futureEmails.length }) }}"
      },
      "id": "response-email",
      "name": "Response Email",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1200, 300]
    }
  ],
  "connections": {
    "Webhook Email": {
      "main": [
        [
          {
            "node": "Orchestrate Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Orchestrate Email": {
      "main": [
        [
          {
            "node": "Save Email Campaign",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Future Emails",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Email Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Future Emails": {
      "main": [
        [
          {
            "node": "Save Future Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Email Campaign": {
      "main": [
        [
          {
            "node": "Call Activity Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Future Emails": {
      "main": [
        [
          {
            "node": "Call Activity Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Email Activity": {
      "main": [
        [
          {
            "node": "Call Activity Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Activity Logger": {
      "main": [
        [
          {
            "node": "Response Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-07-23T23:15:00.000Z",
      "updatedAt": "2025-07-23T23:15:00.000Z",
      "id": "email-orchestrator",
      "name": "email-orchestrator"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-07-23T23:15:00.000Z",
  "versionId": "email-orchestrator-v2"
}
